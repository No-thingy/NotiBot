import os
import logging
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
from dotenv import load_dotenv
from database import init_db, create_user, get_user
from handlers import (
    handle_start,
    handle_notes,
    handle_goals,
    handle_weather,
    handle_currency,
    handle_stats,
    handle_image,
    button_callback,
    handle_text,
    handle_cancel,
    handle_convert,
    handle_guess_number,
    handle_rps,
    handle_quiz
)

load_dotenv()


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error("Exception while handling an update:", exc_info=context.error)
    if update.effective_message:
        await update.effective_message.reply_text(
            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def handle_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        user = update.effective_user
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")

        db_user = get_user(user.id)

        if not db_user:
            db_user = create_user(
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}")

        keyboard = [
            [KeyboardButton("üìù –ó–∞–º–µ—Ç–∫–∏"), KeyboardButton("üéØ –¶–µ–ª–∏")],
            [KeyboardButton("üå§ –ü–æ–≥–æ–¥–∞"), KeyboardButton("üí± –í–∞–ª—é—Ç–∞")],
            [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üéÆ –ò–≥—Ä—ã")],
            [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        welcome_message = (
            f"‚ú® –ü—Ä–∏–≤–µ—Ç, {user.first_name}! ‚ú®\n\n"
            "–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ NotiBot! ü§ñ\n\n"
            "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
            "üìù –ó–∞–º–µ—Ç–∫–∏ - –°–æ–∑–¥–∞–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–º–µ—Ç–∫–∞–º–∏\n"
            "üéØ –¶–µ–ª–∏ - –°—Ç–∞–≤–∏—Ç—å –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–ª–∏\n"
            "üå§ –ü–æ–≥–æ–¥–∞ - –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ø–æ–≥–æ–¥—É\n"
            "üí± –í–∞–ª—é—Ç–∞ - –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç\n"
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
            "üéÆ –ò–≥—Ä—ã - –°—ã–≥—Ä–∞—Ç—å –≤ –º–∏–Ω–∏-–∏–≥—Ä—ã\n\n"
            "üì∏ –¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –∏ —è —Å–æ—Ö—Ä–∞–Ω—é –∏—Ö –¥–ª—è —Ç–µ–±—è!\n\n"
            "–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞! üòä"
        )

        await update.message.reply_text(welcome_message, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_start: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def main() -> None:
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        init_db()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        token = os.getenv('TELEGRAM_TOKEN')
        if not token:
            logger.error("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            raise ValueError("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        application = Application.builder().token(token).build()

        logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥...")
        application.add_handler(CommandHandler("start", handle_start))
        application.add_handler(CommandHandler("notes", handle_notes))
        application.add_handler(CommandHandler("goals", handle_goals))
        application.add_handler(CommandHandler("weather", handle_weather))
        application.add_handler(CommandHandler("currency", handle_currency))
        application.add_handler(CommandHandler("convert", handle_convert))
        application.add_handler(CommandHandler("stats", handle_stats))
        application.add_handler(CommandHandler("cancel", handle_cancel))
        
        application.add_handler(CommandHandler("guess", handle_guess_number))
        application.add_handler(CommandHandler("rps", handle_rps))
        application.add_handler(CommandHandler("quiz", handle_quiz))
        
        application.add_handler(MessageHandler(filters.PHOTO, handle_image))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
        
        application.add_handler(CallbackQueryHandler(button_callback))
        
        application.add_error_handler(error_handler)

        commands = [
            ("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
            ("notes", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∞–º–∏"),
            ("goals", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª—è–º–∏"),
            ("weather", "–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É"),
            ("currency", "–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç"),
            ("convert", "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç"),
            ("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            ("guess", "–ò–≥—Ä–∞ '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ'"),
            ("rps", "–ò–≥—Ä–∞ '–ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞'"),
            ("quiz", "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞"),
            ("cancel", "–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
        ]
        application.bot.set_my_commands(commands)

        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise


if __name__ == '__main__':
    main()
