import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters
from database import create_user, get_user, Session
from database import Note, Goal, Image, Message
import requests
from datetime import datetime
import random

logger = logging.getLogger(__name__)

WAITING_FOR_NOTE = 1
WAITING_FOR_GOAL_TITLE = 2
WAITING_FOR_GOAL_DESCRIPTION = 3

GUESSING_NUMBER = 4
PLAYING_RPS = 5
PLAYING_QUIZ = 6

user_states = {}

QUIZ_QUESTIONS = [
    {
        "question": "–ö–∞–∫–∞—è –ø–ª–∞–Ω–µ—Ç–∞ —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?",
        "options": ["–ú–∞—Ä—Å", "–Æ–ø–∏—Ç–µ—Ä", "–°–∞—Ç—É—Ä–Ω", "–ó–µ–º–ª—è"],
        "correct": 1
    },
    {
        "question": "–°–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–æ–≤ –Ω–∞ –ó–µ–º–ª–µ?",
        "options": ["5", "6", "7", "8"],
        "correct": 2
    },
    {
        "question": "–ö–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ —è–≤–ª—è–µ—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–º –†–æ—Å—Å–∏–∏?",
        "options": ["–ú–µ–¥–≤–µ–¥—å", "–û—Ä–µ–ª", "–í–æ–ª–∫", "–¢–∏–≥—Ä"],
        "correct": 0
    }
]


async def handle_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        user = update.effective_user
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")

        db_user = get_user(user.id)

        if not db_user:
            db_user = create_user(
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}")

        keyboard = [
            [
                InlineKeyboardButton("üìù –ó–∞–º–µ—Ç–∫–∏", callback_data="notes"),
                InlineKeyboardButton("üéØ –¶–µ–ª–∏", callback_data="goals")
            ],
            [
                InlineKeyboardButton("üå§ –ü–æ–≥–æ–¥–∞", callback_data="weather"),
                InlineKeyboardButton("üí± –í–∞–ª—é—Ç–∞", callback_data="currency")
            ],
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
                InlineKeyboardButton("üéÆ –ò–≥—Ä—ã", callback_data="games_menu")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        welcome_message = (
            f"‚ú® –ü—Ä–∏–≤–µ—Ç, {user.first_name}! ‚ú®\n\n"
            "–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ NotiBot! ü§ñ\n\n"
            "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
            "üìù –ó–∞–º–µ—Ç–∫–∏ - –°–æ–∑–¥–∞–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–º–µ—Ç–∫–∞–º–∏\n"
            "üéØ –¶–µ–ª–∏ - –°—Ç–∞–≤–∏—Ç—å –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–ª–∏\n"
            "üå§ –ü–æ–≥–æ–¥–∞ - –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ø–æ–≥–æ–¥—É\n"
            "üí± –í–∞–ª—é—Ç–∞ - –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç\n"
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
            "üéÆ –ò–≥—Ä—ã - –°—ã–≥—Ä–∞—Ç—å –≤ –º–∏–Ω–∏-–∏–≥—Ä—ã\n\n"
            "üì∏ –¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –∏ —è —Å–æ—Ö—Ä–∞–Ω—é –∏—Ö –¥–ª—è —Ç–µ–±—è!\n\n"
            "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        )

        if update.callback_query:
            await update.callback_query.message.edit_text(welcome_message, reply_markup=reply_markup)
        else:
            await update.message.reply_text(welcome_message, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_start: {e}")
        if update.callback_query:
            await update.callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def handle_notes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        user = get_user(update.effective_user.id)
        if not user:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

        keyboard = [
            [
                InlineKeyboardButton("‚úèÔ∏è –°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data="create_note"),
                InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏", callback_data="list_notes")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = (
            "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∞–º–∏\n\n"
            "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:"
        )
        
        if update.callback_query:
            await update.callback_query.message.edit_text(message, reply_markup=reply_markup)
        else:
            await update.message.reply_text(message, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_notes: {e}")
        if update.callback_query:
            await update.callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def handle_goals(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        user = get_user(update.effective_user.id)
        if not user:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

        keyboard = [
            [
                InlineKeyboardButton("üéØ –°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å", callback_data="create_goal"),
                InlineKeyboardButton("üìã –ú–æ–∏ —Ü–µ–ª–∏", callback_data="list_goals")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = (
            "üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª—è–º–∏\n\n"
            "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:"
        )
        
        if update.callback_query:
            await update.callback_query.message.edit_text(message, reply_markup=reply_markup)
        else:
            await update.message.reply_text(message, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_goals: {e}")
        if update.callback_query:
            await update.callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def handle_weather(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        user = get_user(update.effective_user.id)
        if not user:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

        api_key = os.getenv('WEATHER_API_KEY')
        if not api_key:
            logger.error("WEATHER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            return

        city = context.args[0] if context.args else "Pskov"
        url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric&lang=ru"
        response = requests.get(url)
        data = response.json()

        if response.status_code != 200:
            error_message = data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {error_message}")
            
            if "city not found" in error_message.lower():
                message = (
                    "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.\n"
                    "–ü—Ä–∏–º–µ—Ä: /weather –ú–æ—Å–∫–≤–∞"
                )
            else:
                message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        else:
            message = (
                f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {data['name']}:\n\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['main']['temp']}¬∞C\n"
                f"üí® –í–µ—Ç–µ—Ä: {data['wind']['speed']} –º/—Å\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {data['main']['humidity']}%\n"
                f"üìù {data['weather'][0]['description'].capitalize()}\n\n"
                f"–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –¥—Ä—É–≥–æ–º –≥–æ—Ä–æ–¥–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                f"/weather <–Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞>"
            )

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.callback_query:
            await update.callback_query.message.edit_text(message, reply_markup=reply_markup)
        else:
            await update.message.reply_text(message, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_weather: {e}")
        if update.callback_query:
            await update.callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def handle_currency(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        user = get_user(update.effective_user.id)
        if not user:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

        api_key = os.getenv('CURRENCY_API_KEY')
        if not api_key:
            logger.error("CURRENCY_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            return

        base_currency = "RUB"
        target_currencies = ["USD", "EUR", "GBP", "CNY"]
        url = f"https://api.exchangerate-api.com/v4/latest/{base_currency}"
        response = requests.get(url)
        data = response.json()

        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        else:
            message = "üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç:\n\n"
            for currency in target_currencies:
                if currency in data['rates']:
                    rate = data['rates'][currency]
                    formatted_rate = f"{rate:.2f}"
                    message += f"1 {base_currency} = {formatted_rate} {currency}\n"

            message += "\nüí° –î–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            message += "/convert <—Å—É–º–º–∞> <–∏–∑ –≤–∞–ª—é—Ç—ã> <–≤ –≤–∞–ª—é—Ç—É>\n"
            message += "–ü—Ä–∏–º–µ—Ä: /convert 100 USD RUB"

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.callback_query:
            await update.callback_query.message.edit_text(message, reply_markup=reply_markup)
        else:
            await update.message.reply_text(message, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_currency: {e}")
        if update.callback_query:
            await update.callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def handle_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        user = get_user(update.effective_user.id)
        if not user:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

        session = Session()
        notes_count = session.query(Note).filter_by(user_id=user.id).count()
        goals_count = session.query(Goal).filter_by(user_id=user.id).count()
        images_count = session.query(Image).filter_by(user_id=user.id).count()
        messages_count = session.query(Message).filter_by(user_id=user.id).count()

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        stats_message = (
            f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            f"üìù –ó–∞–º–µ—Ç–æ–∫: {notes_count}\n"
            f"üéØ –¶–µ–ª–µ–π: {goals_count}\n"
            f"üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images_count}\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {messages_count}\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™"
        )

        if update.callback_query:
            await update.callback_query.message.edit_text(stats_message, reply_markup=reply_markup)
        else:
            await update.message.reply_text(stats_message, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_stats: {e}")
        if update.callback_query:
            await update.callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def handle_image(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = get_user(update.effective_user.id)
    if not user:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    note_id = context.user_data.get('note_id_for_image')
    if not note_id:
        await update.message.reply_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∑–∞–º–µ—Ç–∫—É —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏' –∏ –Ω–∞–∂–º–∏ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'\n\n"
            "–û—Ç–ø—Ä–∞–≤—å —Å–µ–π—á–∞—Å –º–Ω–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏."
        )
        return
    photo = update.message.photo[-1]
    session = Session()

    image = Image(
        user_id=user.id,
        file_id=photo.file_id,
        description=update.message.caption or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è",
        note_id=note_id
    )
    session.add(image)
    session.commit()
    del context.user_data['note_id_for_image']
    await update.message.reply_text("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –∫ –∑–∞–º–µ—Ç–∫–µ!")
    keyboard = [[
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–º–µ—Ç–∫–∞–º", callback_data="list_notes")
    ]]
    await update.message.reply_text("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–º–µ—Ç–∫–∞–º:", reply_markup=InlineKeyboardMarkup(keyboard))

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle button callbacks."""
    try:
        query = update.callback_query
        await query.answer()

        user = get_user(query.from_user.id)
        if not user:
            await query.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

        if query.data == "main_menu":
            await handle_start(update, context)
            return

        elif query.data == "games_menu":
            await show_games_menu(update, context)
            return

        elif query.data == "notes":
            await handle_notes(update, context)
            return

        elif query.data == "goals":
            await handle_goals(update, context)
            return

        elif query.data == "weather":
            await handle_weather(update, context)
            return

        elif query.data == "currency":
            await handle_currency(update, context)
            return

        elif query.data == "stats":
            await handle_stats(update, context)
            return

        elif query.data.startswith("game_"):
            game_type = query.data.split("_")[1]
            if game_type == "guess":
                await handle_guess_number(update, context)
            elif game_type == "rps":
                await handle_rps(update, context)
            elif game_type == "quiz":
                await handle_quiz(update, context)
            return

        elif query.data.startswith("rps_"):
            user_choice = query.data.split("_")[1]
            choices = ["rock", "paper", "scissors"]
            bot_choice = random.choice(choices)
            
            result = determine_rps_winner(user_choice, bot_choice)
            
            emoji_map = {"rock": "‚úä", "paper": "‚úã", "scissors": "‚úåÔ∏è"}
            result_message = (
                f"üéÆ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã:\n\n"
                f"–¢–≤–æ–π –≤—ã–±–æ—Ä: {emoji_map[user_choice]}\n"
                f"–ú–æ–π –≤—ã–±–æ—Ä: {emoji_map[bot_choice]}\n\n"
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}\n\n"
                f"–ß—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üéÆ –ò–≥—Ä—ã' –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å /rps"
            )
            
            keyboard = [
                [
                    InlineKeyboardButton("üéÆ –ò–≥—Ä—ã", callback_data="games_menu"),
                    InlineKeyboardButton("‚úä –°—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="game_rps")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.edit_text(result_message, reply_markup=reply_markup)
            return

        elif query.data.startswith("quiz_"):
            if user.id not in user_states or user_states[user.id] != PLAYING_QUIZ:
                await query.message.edit_text("‚ùå –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –ù–∞—á–Ω–∏ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥–æ–π /quiz")
                return

            answer = int(query.data.split("_")[1])
            current_question = context.user_data.get('current_question', 0)
            correct_answer = QUIZ_QUESTIONS[current_question]['correct']

            if answer == correct_answer:
                context.user_data['quiz_score'] = context.user_data.get('quiz_score', 0) + 1
                result = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
            else:
                result = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ!"

            await query.message.edit_text(
                f"{result}\n\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {QUIZ_QUESTIONS[current_question]['options'][correct_answer]}"
            )

            context.user_data['current_question'] = current_question + 1
            await show_quiz_question(update, context)
            return

        elif query.data == "create_note":
            user_states[user.id] = WAITING_FOR_NOTE
            await query.message.edit_text(
                "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.\n\n"
                "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏, –æ—Ç–ø—Ä–∞–≤—å /cancel"
            )
            return

        elif query.data == "create_goal":
            user_states[user.id] = WAITING_FOR_GOAL_TITLE
            await query.message.edit_text(
                "üéØ –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏:\n\n"
                "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–∏, –æ—Ç–ø—Ä–∞–≤—å /cancel"
            )
            return

        elif query.data == "list_notes":
            session = Session()
            notes = session.query(Note).filter_by(user_id=user.id).all()

            if not notes:
                await query.message.edit_text("üìù –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
            else:
                for note in notes:
                    buttons = [
                        InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_note_{note.id}")
                    ]

                    if note.images:
                        buttons.insert(0, InlineKeyboardButton("üì∑ –û—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                                                               callback_data=f"show_image_{note.id}"))
                    else:
                        buttons.insert(0, InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                                                               callback_data=f"add_image_{note.id}"))

                    message = f"‚Ä¢ {note.content}\nüìÖ {note.created_at.strftime('%d.%m.%Y %H:%M')}"
                    await query.message.reply_text(message, reply_markup=InlineKeyboardMarkup([buttons]))

            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="notes")]]
            await query.message.reply_text("–í—ã–±–µ—Ä–∏ –∑–∞–º–µ—Ç–∫—É:", reply_markup=InlineKeyboardMarkup(keyboard))
            return

        elif query.data == "list_goals":
            session = Session()
            goals = session.query(Goal).filter_by(user_id=user.id).all()

            message = "üéØ –¢–≤–æ–∏ —Ü–µ–ª–∏:\n\n"
            keyboard = []

            if not goals:
                message = "üéØ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π."
            else:
                for goal in goals:
                    message += f"‚Ä¢ {goal.title}\n"
                    message += f"üìÑ {goal.description}\n"
                    message += f"üìÖ {goal.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                    message += f"üìå –°—Ç–∞—Ç—É—Å: {goal.status}\n"
                    message += "\n"
                    keyboard.append([
                        InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_goal_{goal.id}")
                    ])

            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="goals")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.edit_text(message, reply_markup=reply_markup)
            return


        elif query.data.startswith("add_image_"):
            note_id = int(query.data.split("_")[2])
            context.user_data['note_id_for_image'] = note_id
            await query.message.reply_text("üì∑ –û—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫ —ç—Ç–æ–π –∑–∞–º–µ—Ç–∫–µ.")
            return

        elif query.data.startswith("show_image_"):
            note_id = int(query.data.split("_")[2])
            session = Session()
            image = session.query(Image).filter_by(note_id=note_id, user_id=user.id).first()
            if image:
                keyboard = [[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–º–µ—Ç–∫–∞–º", callback_data="list_notes")
                ]]
                await query.message.reply_photo(
                    image.file_id,
                    caption=f"üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏:\n{image.note.content}",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            else:
                await query.message.reply_text("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —ç—Ç–æ–π –∑–∞–º–µ—Ç–∫–∏.")
            return


        elif query.data.startswith("delete_note_"):
            note_id = int(query.data.split("_")[2])
            session = Session()
            note = session.query(Note).filter_by(id=note_id, user_id=user.id).first()
            if note:
                session.delete(note)
                session.commit()
                await query.message.reply_text("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
            else:
                await query.message.reply_text("‚ùå –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await handle_notes(update, context)
            return

        elif query.data.startswith("delete_goal_"):
            goal_id = int(query.data.split("_")[2])
            session = Session()
            goal = session.query(Goal).filter_by(id=goal_id, user_id=user.id).first()
            if goal:
                session.delete(goal)
                session.commit()
                await query.message.reply_text("‚úÖ –¶–µ–ª—å —É–¥–∞–ª–µ–Ω–∞.")
            else:
                await query.message.reply_text("‚ùå –¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await handle_goals(update, context)
            return

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ button_callback: {e}")
        if update.callback_query:
            await update.callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle text messages and quick command buttons."""
    try:
        text = update.message.text
        user = get_user(update.effective_user.id)
        
        if not user:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

        if user.id in user_states:
            if user_states[user.id] == WAITING_FOR_NOTE:
                if not text:
                    await update.message.reply_text("‚ùå –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    return
                
                session = Session()
                note = Note(
                    user_id=user.id,
                    content=text
                )
                
                session.add(note)
                session.commit()
                
                del user_states[user.id]
                
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="notes")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text(
                    "‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
                    reply_markup=reply_markup
                )
                return

            elif user_states[user.id] == WAITING_FOR_GOAL_TITLE:
                if not text:
                    await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    return
                
                context.user_data['goal_title'] = text
                user_states[user.id] = WAITING_FOR_GOAL_DESCRIPTION
                
                await update.message.reply_text(
                    "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏:\n\n"
                    "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–∏, –æ—Ç–ø—Ä–∞–≤—å /cancel"
                )
                return

            elif user_states[user.id] == WAITING_FOR_GOAL_DESCRIPTION:
                if not text:
                    await update.message.reply_text("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    return
                
                session = Session()
                goal = Goal(
                    user_id=user.id,
                    title=context.user_data['goal_title'],
                    description=text,
                    status="–í –ø—Ä–æ—Ü–µ—Å—Å–µ"
                )
                
                session.add(goal)
                session.commit()
                
                del context.user_data['goal_title']
                del user_states[user.id]
                
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="goals")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    "‚úÖ –¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!",
                    reply_markup=reply_markup
                )
                return

            elif user_states[user.id] == GUESSING_NUMBER:
                try:
                    guess = int(text)
                    context.user_data['attempts'] = context.user_data.get('attempts', 0) + 1
                    
                    if guess < context.user_data['secret_number']:
                        await update.message.reply_text("‚¨ÜÔ∏è –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ!")
                    elif guess > context.user_data['secret_number']:
                        await update.message.reply_text("‚¨áÔ∏è –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ!")
                    else:
                        attempts = context.user_data['attempts']
                        keyboard = [
                            [
                                InlineKeyboardButton("üéÆ –ò–≥—Ä—ã", callback_data="games_menu"),
                                InlineKeyboardButton("üé≤ –°—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="game_guess")
                            ]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        
                        await update.message.reply_text(
                            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –∑–∞ {attempts} –ø–æ–ø—ã—Ç–æ–∫!",
                            reply_markup=reply_markup
                        )
                        del user_states[user.id]
                        del context.user_data['secret_number']
                        del context.user_data['attempts']
                except ValueError:
                    await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ!")
                return

        if text == "üìù –ó–∞–º–µ—Ç–∫–∏":
            await handle_notes(update, context)
        elif text == "üéØ –¶–µ–ª–∏":
            await handle_goals(update, context)
        elif text == "üå§ –ü–æ–≥–æ–¥–∞":
            await handle_weather(update, context)
        elif text == "üí± –í–∞–ª—é—Ç–∞":
            await handle_currency(update, context)
        elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            await handle_stats(update, context)
        elif text == "üéÆ –ò–≥—Ä—ã":
            await show_games_menu(update, context)
        elif text == "‚ùì –ü–æ–º–æ—â—å":
            await handle_start(update, context)
        else:
            session = Session()
            message = Message(
                user_id=user.id,
                text=text,
                created_at=datetime.now()
            )
            session.add(message)
            session.commit()
            
            await update.message.reply_text(
                "üìù –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º."
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_text: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def handle_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle cancel command."""
    try:
        user = get_user(update.effective_user.id)
        if user and user.id in user_states:
            if 'goal_title' in context.user_data:
                del context.user_data['goal_title']
            del user_states[user.id]
            
            await update.message.reply_text(
                "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
                "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É."
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_cancel: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def handle_convert(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Convert currency."""
    try:
        user = get_user(update.effective_user.id)
        if not user:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

        if len(context.args) != 3:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /convert <—Å—É–º–º–∞> <–∏–∑ –≤–∞–ª—é—Ç—ã> <–≤ –≤–∞–ª—é—Ç—É>\n"
                "–ü—Ä–∏–º–µ—Ä: /convert 100 USD RUB"
            )
            return

        amount, from_currency, to_currency = context.args
        from_currency = from_currency.upper()
        to_currency = to_currency.upper()

        try:
            amount = float(amount)
        except ValueError:
            await update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return

        api_key = os.getenv('CURRENCY_API_KEY')
        if not api_key:
            logger.error("CURRENCY_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            return

        url = f"https://api.exchangerate-api.com/v4/latest/{from_currency}"
        response = requests.get(url)
        data = response.json()

        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        if to_currency not in data['rates']:
            await update.message.reply_text(f"‚ùå –í–∞–ª—é—Ç–∞ {to_currency} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        rate = data['rates'][to_currency]
        converted_amount = amount * rate

        result_message = (
            f"üí± –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:\n\n"
            f"{amount} {from_currency} = {converted_amount:.2f} {to_currency}\n"
            f"–ö—É—Ä—Å: 1 {from_currency} = {rate:.4f} {to_currency}"
        )

        await update.message.reply_text(result_message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_convert: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )


def determine_rps_winner(user_choice: str, bot_choice: str) -> str:
    if user_choice == bot_choice:
        return "–ù–∏—á—å—è! ü§ù"
    
    winning_combinations = {
        "rock": "scissors",
        "paper": "rock",
        "scissors": "paper"
    }
    
    if winning_combinations[user_choice] == bot_choice:
        return "–¢—ã –ø–æ–±–µ–¥–∏–ª! üéâ"
    else:
        return "–Ø –ø–æ–±–µ–¥–∏–ª! üòé"


async def show_quiz_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        current_question = context.user_data.get('current_question', 0)
        if current_question >= len(QUIZ_QUESTIONS):
            score = context.user_data.get('quiz_score', 0)
            total = len(QUIZ_QUESTIONS)
            
            if update.effective_user.id in user_states:
                del user_states[update.effective_user.id]

            keyboard = [
                [
                    InlineKeyboardButton("üéÆ –ò–≥—Ä—ã", callback_data="games_menu"),
                    InlineKeyboardButton("‚ùì –°—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="game_quiz")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            message = (
                f"üéâ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –∏–∑ {total} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!\n\n"
                f"–ß—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å /quiz"
            )
            
            if update.callback_query:
                await update.callback_query.message.edit_text(message, reply_markup=reply_markup)
            else:
                await update.message.reply_text(message, reply_markup=reply_markup)
            return

        question = QUIZ_QUESTIONS[current_question]
        keyboard = []
        for i, option in enumerate(question['options']):
            keyboard.append([InlineKeyboardButton(option, callback_data=f"quiz_{i}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = (
            f"‚ùì –í–æ–ø—Ä–æ—Å {current_question + 1} –∏–∑ {len(QUIZ_QUESTIONS)}:\n\n"
            f"{question['question']}"
        )
        
        if update.callback_query:
            await update.callback_query.message.edit_text(message, reply_markup=reply_markup)
        else:
            await update.message.reply_text(message, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_quiz_question: {e}")
        if update.callback_query:
            await update.callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def show_games_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        keyboard = [
            [
                InlineKeyboardButton("üé≤ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ", callback_data="game_guess"),
                InlineKeyboardButton("‚úä –ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞", callback_data="game_rps")
            ],
            [InlineKeyboardButton("‚ùì –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data="game_quiz")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = (
            "üéÆ –í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:\n\n"
            "üé≤ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ - –ø–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100\n"
            "‚úä –ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞ - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞\n"
            "‚ùì –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è\n\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
            "/guess - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ'\n"
            "/rps - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É '–ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞'\n"
            "/quiz - –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"
        )

        if update.callback_query:
            await update.callback_query.message.edit_text(message, reply_markup=reply_markup)
        else:
            await update.message.reply_text(message, reply_markup=reply_markup)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_games_menu: {e}")
        if update.callback_query:
            await update.callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def handle_guess_number(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        user = get_user(update.effective_user.id)
        if not user:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

        context.user_data['secret_number'] = random.randint(1, 100)
        context.user_data['attempts'] = 0
        user_states[user.id] = GUESSING_NUMBER

        message = (
            "üéÆ –ò–≥—Ä–∞ '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ'!\n\n"
            "–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.\n"
            "–ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å –µ–≥–æ!\n\n"
            "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É, –æ—Ç–ø—Ä–∞–≤—å /cancel"
        )

        if update.callback_query:
            await update.callback_query.message.edit_text(message)
        else:
            await update.message.reply_text(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_guess_number: {e}")
        if update.callback_query:
            await update.callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def handle_rps(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        user = get_user(update.effective_user.id)
        if not user:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

        keyboard = [
            [
                InlineKeyboardButton("‚úä", callback_data="rps_rock"),
                InlineKeyboardButton("‚úã", callback_data="rps_paper"),
                InlineKeyboardButton("‚úåÔ∏è", callback_data="rps_scissors")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        message = (
            "üéÆ –ò–≥—Ä–∞ '–ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞'!\n\n"
            "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ö–æ–¥:"
        )

        if update.callback_query:
            await update.callback_query.message.edit_text(message, reply_markup=reply_markup)
        else:
            await update.message.reply_text(message, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_rps: {e}")
        if update.callback_query:
            await update.callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def handle_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        user = get_user(update.effective_user.id)
        if not user:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

        context.user_data['quiz_score'] = 0
        context.user_data['current_question'] = 0
        user_states[user.id] = PLAYING_QUIZ

        await show_quiz_question(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_quiz: {e}")
        if update.callback_query:
            await update.callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
